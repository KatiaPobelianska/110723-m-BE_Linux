## Базовый порядок работы с проектом с помощью Git/GitHub

1. Открыть проект в любимом редакторе
2. При необх. инициализировать новый репо
    1. `git init`
3. Фиксация изменений
    - `git add .` / `**git add -A**` индексация изменений
    - `git commit -m 'initial commit'` сохранение
4. Создать репо на **GitHub**
5. Выполнить привязку между локальным и дистаниционным репо (`LOCAL ↔ REMOTE`)
6. Выгрузиить изменения на `GitHub`
    1. `git push -u origin название_ветки`
    2. `git push`
    3. `git push -f` принудительная выгрузка


## Проверка проекта на наличие репо

```bash
git status
```

## Переименование локальной ветки

```bash
git branch -m new
```

### Проверка состояния раб/каталога

```bash
git status -s
```

## Легенда `git status -s`

- `??` Untracked
- `A` Added
- `M` Modified
- `D` Deleted
- `R` Renamed

## Проверка текущей привязки

```bash
git remote -v
```

## Удаление текущей привязки

```bash
git remote rm origin
```

## Просмотр список веток

```bash
git branch
git branch -vv
```

## Модели совместной разработки

- с доступом на запись
- без доступа на запись

## Машина времени

```bash
git log # просмотр журнала коммитов
git checkout commit_id # переключиться на коммит
git checkout main # вернуться на последнюю версию
```

## Создание новой ветки

```bash
git branch new_branch # от текущего коммита
git branch new_branch commit_id # от определенного коммита
```

## Выгрузить изменения с GitHub

```bash
git pull
```

## Подключение к удаленному серверу по `SSH`

```bash
ssh user@server_addr
```

## Что необходимо знать для совместной разработки

- **Ветвление**
    - стратегия ветвления
    - основные команды
- **Модели совместной разработки**
    - понимание
    - порядок работы

## Ветвление

- один из основных механизмов в `Git`
- позволяет иметь несколько версий проект
- **ветка**
    - еще одна версия проекта
    - изолированный поток разработки

## Основные термины

- проверка кода (code review)
- заявка на улучшение (pull request, **PR**)


## Стратегии ветвления

- **Git Flow**
- **GitHub Flow**
    - `main/stable/production/master` - long-term
    - `bugfix1/payments/login` - short-term под отдельные задачи

**Основные команды для работы с ветками**

- `git branch название_ветки` создать ветку
- `git branch -m новое_название` переименовать текущую ветку
- `git checkout название_ветки` переключиться на другую ветку
- `git checkout -b новая_ветка` создать и переключиться на новую ветку
- `git branch -D название_ветки` удалить ветку
- `git merge название_ветки` слияние веток
- `git branch` показать список веток
    - `git branch -vv`
    - `git branch -avv`